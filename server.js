const express = require('express');
const { BigQuery } = require('@google-cloud/bigquery');
const OpenAI = require('openai');
const cors = require('cors');
const path = require('path');

// Set up Google Cloud credentials
process.env.GOOGLE_APPLICATION_CREDENTIALS = path.join(__dirname, 'funnel-clients-914594ed3a5f.json');

// Initialize BigQuery client
const bigquery = new BigQuery();

// Set up OpenAI API key
const OPENAI_API_KEY = 'sk-proj-';
const openai = new OpenAI(OPENAI_API_KEY);

const app = express();
app.use(cors());
app.use(express.json());

app.post('/ask', async (req, res) => {
    const { userQuestion, datasetName } = req.body;

    let selectedTable = '';
    if (['age', 'gender', 'city', 'region', 'demography', 'location'].some(keyword => userQuestion.toLowerCase().includes(keyword))) {
        selectedTable = 'funnel_audience';
    } else if (['conversion', 'product breakdown', 'best conversion name', 'best ad name'].some(keyword => userQuestion.toLowerCase().includes(keyword))) {
        selectedTable = 'funnel_conversion';
    } else {
        selectedTable = 'funnel_main';
    }

    try {
        // Fetch table schema to provide more specific information to OpenAI
        const [metadata] = await bigquery.dataset(datasetName).table(selectedTable).getMetadata();
        const schemaFields = metadata.schema.fields.map(field => `${field.name}: ${field.type}`).join(', ');

        // Generate BigQuery SQL query using OpenAI
        const response = await openai.chat.completions.create({
            model: 'gpt-3.5-turbo',
            messages: [
                { role: 'system', content: `You are a helpful assistant that translates natural language questions into SQL queries. The table schema is: ${schemaFields}` },
                { role: 'user', content: `Translate the following question into a BigQuery SQL query using the dataset '${datasetName}' and table '${selectedTable}': ${userQuestion}` }
            ]
        });

        // Extract the SQL query from the OpenAI response
        const responseText = response.choices[0].message.content;
        const sqlMatch = responseText.match(/```sql\n([\s\S]*?)\n```/);
        if (!sqlMatch) {
            throw new Error('Failed to extract SQL query from OpenAI response');
        }
        const sqlQuery = sqlMatch[1].trim();
        console.log('Generated SQL Query:', sqlQuery);

        // Validate the SQL query before executing it
        const [queryValidation] = await bigquery.query({ query: sqlQuery, dryRun: true });
        if (!queryValidation.errors) {
            // Run the SQL query on BigQuery
            const [rows] = await bigquery.query(sqlQuery);

            // Generate a human-like analytical response based on all query results
            const resultsStr = rows.map(row => Object.entries(row).map(([key, value]) => `${key}: ${value}`).join('\n')).join('\n\n');
            const aiResponse = await openai.chat.completions.create({
                model: 'gpt-3.5-turbo',
                messages: [
                    { role: 'system', content: 'You are a helpful assistant named Kedet that provides data analysis and insights based on query results.' },
                    { role: 'user', content: `Given the following query results:\n\n${resultsStr}\n\nand the user's question:\n\n${userQuestion}\n\nProvide an insightful, analytical response, including recommendations and predictions if applicable.` }
                ]
            });

            const humanResponse = aiResponse.choices[0].message.content.trim();

            res.json({ rows, humanResponse });
        } else {
            res.status(400).json({ error: 'Invalid SQL query generated by OpenAI.' });
        }

    } catch (error) {
        console.error(error);
        res.status(500).json({ error: 'An error occurred while processing your request.' });
    }
});

const PORT = process.env.PORT || 5000;
app.listen(PORT, () => {
    console.log(`Server is running on port ${PORT}`);
});
